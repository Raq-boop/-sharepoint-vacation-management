import * as React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import PedidoFerias from './PedidoFerias';
import { IPedidoFeriasProps } from './IPedidoFeriasProps';
import { sp } from '@pnp/sp/presets/all';

// Mock do PnP
jest.mock('@pnp/sp/presets/all');

// Mock das props
const mockProps: IPedidoFeriasProps = {
  description: 'Test description',
  isDarkTheme: false,
  environmentMessage: 'Test environment',
  hasTeamsContext: false,
  userDisplayName: 'Test User',
  context: {} as any
};

describe('PedidoFerias Component', () => {
  beforeEach(() => {
    // Limpar todos os mocks antes de cada teste
    jest.clearAllMocks();
  });

  test('deve renderizar o componente principal', () => {
    render(<PedidoFerias {...mockProps} />);
    
    expect(screen.getByText('Filtros')).toBeInTheDocument();
    expect(screen.getByText('Pedidos de F√©rias (8 itens)')).toBeInTheDocument();
  });

  test('deve exibir todos os filtros corretamente', () => {
    render(<PedidoFerias {...mockProps} />);
    
    // Verificar se os filtros est√£o presentes
    expect(screen.getByLabelText('üë§ Colaborador:')).toBeInTheDocument();
    expect(screen.getByLabelText('üìä Status:')).toBeInTheDocument();
    expect(screen.getByPlaceholderText('üîç Buscar por motivo...')).toBeInTheDocument();
  });

  test('deve exibir os pedidos de f√©rias', () => {
    render(<PedidoFerias {...mockProps} />);
    
    // Verificar se os funcion√°rios est√£o sendo exibidos
    expect(screen.getByText('Jo√£o Silva')).toBeInTheDocument();
    expect(screen.getByText('Maria Santos')).toBeInTheDocument();
    expect(screen.getByText('Ana Costa')).toBeInTheDocument();
    expect(screen.getByText('Ricardo Oliveira')).toBeInTheDocument();
  });

  test('deve exibir os status corretos', () => {
    render(<PedidoFerias {...mockProps} />);
    
    expect(screen.getAllByText('PENDENTE')).toHaveLength(4);
    expect(screen.getAllByText('APROVADO')).toHaveLength(3);
    expect(screen.getAllByText('REJEITADO')).toHaveLength(1);
  });

  test('deve exibir bot√µes de a√ß√£o para pedidos pendentes', () => {
    render(<PedidoFerias {...mockProps} />);
    
    const approveButtons = screen.getAllByText('‚úì Aprovar');
    const rejectButtons = screen.getAllByText('‚úó Rejeitar');
    
    // Deve ter bot√µes ativos para pedidos pendentes
    expect(approveButtons.length).toBeGreaterThan(0);
    expect(rejectButtons.length).toBeGreaterThan(0);
  });

  test('deve desabilitar bot√µes para pedidos j√° processados', () => {
    render(<PedidoFerias {...mockProps} />);
    
    const allApproveButtons = screen.getAllByText('‚úì Aprovar');
    const allRejectButtons = screen.getAllByText('‚úó Rejeitar');
    
    // Verificar se alguns bot√µes est√£o desabilitados
    const disabledApproveButtons = allApproveButtons.filter(button => 
      (button as HTMLButtonElement).disabled
    );
    const disabledRejectButtons = allRejectButtons.filter(button => 
      (button as HTMLButtonElement).disabled
    );
    
    expect(disabledApproveButtons.length).toBeGreaterThan(0);
    expect(disabledRejectButtons.length).toBeGreaterThan(0);
  });

  test('deve exibir motivo de rejei√ß√£o para pedidos rejeitados', () => {
    render(<PedidoFerias {...mockProps} />);
    
    expect(screen.getByText(/Motivo da rejei√ß√£o: Per√≠odo de alta demanda de projeto/)).toBeInTheDocument();
  });

  test('deve ter op√ß√µes corretas no filtro de colaborador', () => {
    render(<PedidoFerias {...mockProps} />);
    
    const collaboratorSelect = screen.getByLabelText('üë§ Colaborador:');
    
    expect(collaboratorSelect).toHaveDisplayValue('Todos os colaboradores');
    
    // Verificar se as op√ß√µes est√£o presentes
    const options = screen.getAllByRole('option');
    expect(options).toHaveLength(9); // Todos + 8 colaboradores
  });

  test('deve ter op√ß√µes corretas no filtro de status', () => {
    render(<PedidoFerias {...mockProps} />);
    
    const statusSelect = screen.getByLabelText('üìä Status:');
    
    expect(statusSelect).toHaveDisplayValue('Todos os estados');
    
    // Verificar se as op√ß√µes de status est√£o presentes
    expect(screen.getByDisplayValue('Todos os estados')).toBeInTheDocument();
  });

  test('deve ter controles de ordena√ß√£o', () => {
    render(<PedidoFerias {...mockProps} />);
    
    expect(screen.getByText('Ordenar por:')).toBeInTheDocument();
    
    const sortSelect = screen.getByRole('combobox', { name: /ordenar/i });
    expect(sortSelect).toBeInTheDocument();
  });

  test('deve exibir per√≠odos de f√©rias formatados corretamente', () => {
    render(<PedidoFerias {...mockProps} />);
    
    // Verificar se os per√≠odos est√£o sendo exibidos
    expect(screen.getByText('01/07/2025 ‚Äî 15/07/2025 (15 dias)')).toBeInTheDocument();
    expect(screen.getByText('20/12/2025 ‚Äî 30/12/2025 (10 dias)')).toBeInTheDocument();
  });

  test('deve exibir datas de solicita√ß√£o formatadas', () => {
    render(<PedidoFerias {...mockProps} />);
    
    expect(screen.getByText('üìÖ Solicitado em: 15/06/2025 11:00')).toBeInTheDocument();
    expect(screen.getByText('üìÖ Solicitado em: 01/11/2025 14:30')).toBeInTheDocument();
  });

  test('deve ter todos os bot√µes de detalhes', () => {
    render(<PedidoFerias {...mockProps} />);
    
    const detailsButtons = screen.getAllByText('üëÅ Detalhes');
    expect(detailsButtons).toHaveLength(8); // Um para cada funcion√°rio
  });

  test('deve ter avatares √∫nicos para cada funcion√°rio', () => {
    render(<PedidoFerias {...mockProps} />);
    
    expect(screen.getByText('JS')).toBeInTheDocument(); // Jo√£o Silva
    expect(screen.getByText('MS')).toBeInTheDocument(); // Maria Santos
    expect(screen.getByText('AC')).toBeInTheDocument(); // Ana Costa
    expect(screen.getByText('RO')).toBeInTheDocument(); // Ricardo Oliveira
  });

  test('deve aplicar classes CSS corretas para diferentes status', () => {
    render(<PedidoFerias {...mockProps} />);
    
    const pendingItems = screen.getByText('Jo√£o Silva').closest('.pending');
    const approvedItems = screen.getByText('Maria Santos').closest('.approved');
    const rejectedItems = screen.getByText('Ricardo Oliveira').closest('.rejected');
    
    expect(pendingItems).toBeInTheDocument();
    expect(approvedItems).toBeInTheDocument();
    expect(rejectedItems).toBeInTheDocument();
  });
});